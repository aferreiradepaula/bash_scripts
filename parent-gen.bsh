#!/bin/bash

LEVEL=${LEVEL="info"}

LOG="logger.bsh"

CURR_DIR=`pwd`

ETICS_HOME=${ETICS_HOME="ND"}

INTRO="\n
###############################################################################
#
#                              parent-gen.bsh
#
###############################################################################
#
#  Faz o checkout de todos as pastas parent dos projetos ETICS e faz a geracao
#  dos mesmos.
#
###############################################################################
"

USO="
#
# Uso: 
#  > parent-gen.bsh [-h, -help, --help] | [-oc, --onlycheckout] | [-og, --onlygen]
#
#    Parametros:
#    (sem parametros)    :: Faz o checout e gera logo em seguida
#    ou 
#    -h, -help, --help   :: (opcional) Este informativo.
#    ou
#    -oc, --onlycheckout :: (opcional) Faz somente o checkout.
#    ou
#    -og, --onlygen      :: (opcional) Executa a geracao (caso ja exista). 
#
###############################################################################
#
#  OBS:  Deve ser executado a partir do diretorio \"legacy/core\" do oper.
#
###############################################################################\n
"

_trapError() {
	$LOG _error "Deu algo errado... :("
	fg
}

trap _trapError ERR

#################### MAIN
$LOG _info "Iniciando..."
$LOG _debug "CURR_DIR: $CURR_DIR"
OPCAO="all"
if [ $# -eq 1 ]; then
	if [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--help " ]; then
		$LOG _info "$INTRO"
		$LOG _info "$USO"
		exit 1
	fi
	
	if [ "$1" = "-oc" ] || [ "$1" = "--onlycheckout" ]; then
	   OPCAO="checkout"
	else 
	  if [ "$1" = "-og" ] || [ "$1" = "--onlygen" ]; then
	    OPCAO="gen"
	  else 
	    $LOG _error "Opcao invalida!"
		$LOG _info "$USO"
		exit 1
	  fi
	fi
fi

if [ $# -gt 1 ]; then
	$LOG _error "Quantidade de parametros invalida!"
	$LOG _info "$USO"
	exit 1
fi

# Verifica se ETICS_HOME esta definida
if [ "$ETICS_HOME" = "ND" ]; then
	$LOG _error "Ambiente nao esta configurado."
	exit 1
fi

CMD="echo '$ETICS_HOME' | awk -F '/' '{print  \$(NF-1)}'"		
$LOG _debug "CMD: $CMD"
CLIENTE=`eval "$CMD"`
$LOG _debug "CLIENTE: $CLIENTE"

CMD="echo '$ETICS_HOME' | awk -F '$CLIENTE' '{print \$1}'"
$LOG _debug "CMD: $CMD"
MAIN_DIR=`eval "$CMD"`
$LOG _debug "MAIN_DIR: $MAIN_DIR"

CORE_DIR="$MAIN_DIR"repositorio/oper/fontes/components/legacy/core
$LOG _debug "CORE_DIR: $CORE_DIR"
if [ "$CURR_DIR" != "$CORE_DIR" ]; then
  $LOG _error "Diretorio invalido".
  $LOG _warn "Este script deve ser executado a partir do diretorio \"repositorio/oper/fontes/components/legacy/core\" do oper."
  exit 1
fi

FONTES_DIR="$MAIN_DIR"repositorio
$LOG _debug "FONTES_DIR: $FONTES_DIR"
if [ -d $FONTES_DIR ]; then 
	CMD="mkdir -p $FONTES_DIR"
	eval "$CMD"
fi

# Recupera a url svn principal do ambiente corrente.
CMD="svn info | grep URL | awk '{print \$2}' | awk -F \"implementacao\" '{print \$1\"implementacao\"}' | grep -v URL"
$LOG _debug "CMD: $CMD"
SVN_ROOT_URL=`eval "$CMD"`
$LOG _debug "SVN_ROOT_URL: $SVN_ROOT_URL"

# Recupera a lista de diretorios principais
CMD="svn list -R --depth immediates $SVN_ROOT_URL | grep -v pom.xml | awk -F'/' '{printf \"%s \", \$1}'"
$LOG _debug "CMD: $CMD"
LIST_PROJ_DIR_NAME_AUX=`eval "$CMD"`
LIST_PROJ_DIR_NAME=$LIST_PROJ_DIR_NAME_AUX"main-super"
$LOG _debug "LIST_PROJ_DIR_NAME: $LIST_PROJ_DIR_NAME"

# Vai para o diretorio fontes para comecar a bagunca
$LOG _debug "Entrando em $FONTES_DIR"
cd $FONTES_DIR
MSG_DIR_CURR=`pwd`
$LOG _debug "$MSG_DIR_CURR"

if [ "$OPCAO" = "all" ] || [ "$OPCAO" = "checkout" ]; then
	# Para cada diretorio baixar todos os compomentes/parents.
	MSG="Criando os diretorios e fazendo checkout do pom.xml ..."
	$LOG _info "$MSG" -b 
	for PROJ_DIR_NAME in $LIST_PROJ_DIR_NAME; do 
		if [ "$PROJ_DIR_NAME" != "main" ] && [ "$PROJ_DIR_NAME" != "main-super" ] && [ "$PROJ_DIR_NAME" != "eai" ] && [ "$PROJ_DIR_NAME" != "landbase" ]; then
		  # Diretorios padronizados
		  $LOG _debug "Montando projetos padronizados..."
		  
		  SVN_PROJ_URL=$SVN_ROOT_URL"/"$PROJ_DIR_NAME"/fontes/components/parent"
		  DIR_PARENT=$PROJ_DIR_NAME"/fontes/components/parent"		
		else 
		  $LOG _debug "Montando projetos fora do padrao..."
		  
		  if [ "$PROJ_DIR_NAME" = "main" ];then
			SVN_PROJ_URL=$SVN_ROOT_URL"/main/public-bom"
			DIR_PARENT="main/public-bom"		
		  fi
		  
		  if [ "$PROJ_DIR_NAME" = "main-super" ];then
			SVN_PROJ_URL="$SVN_ROOT_URL/main/super-parent"
			DIR_PARENT="main/super-parent"
		  fi
		  
		  if [ "$PROJ_DIR_NAME" = "eai" ];then
			SVN_PROJ_URL=$SVN_ROOT_URL"/"$PROJ_DIR_NAME"/parent"
			DIR_PARENT=$PROJ_DIR_NAME"/parent"		
		  fi
		  
		  if [ "$PROJ_DIR_NAME" = "landbase" ];then
			SVN_PROJ_URL=$SVN_ROOT_URL"/"$PROJ_DIR_NAME"/fontes/parent"
			DIR_PARENT=$PROJ_DIR_NAME"/fontes/parent"		
		  fi
		  
		fi
		
		$LOG _debug "Criando diretorio: $DIR_PARENT"
		CMD="mkdir -p $DIR_PARENT"
		$LOG _debug "CMD: $CMD"
		eval "$CMD"
			
		# Faz o checkout
		cd $DIR_PARENT
		$LOG _debug "Fazendo o checkout do pom.xml."
		CMD="svn -q co $SVN_PROJ_URL/ ."
		$LOG _debug "CMD: $CMD"
		eval "$CMD"
		
		# Volta ao diretorio fontes
		cd $FONTES_DIR 	
	done
	$LOG _info "$MSG" -ok
fi

if [ "$OPCAO" = "all" ] || [ "$OPCAO" = "gen" ]; then
	# Geracao aqui
	# Recupera o pom principal
	CMD="svn -q co --depth files $SVN_ROOT_URL/ ."
	$LOG _debug "CMD: $CMD"
	eval "$CMD"

	# Gerando na ordem correta.
	CMD="cat pom.xml | grep \"module>\" | sed 's|module||g' | sed 's|<>||g' | sed 's|</>||g' |  sed 's|<!-- >||g' | sed 's|</ -->||g'"
	$LOG _debug "CMD: $CMD"
	LIST_DIR_GER_AUX=`eval "$CMD"`
	$LOG _debug "LIST_DIR_GER_AUX: $LIST_DIR_GER_AUX"

	for DIR_GER in $LIST_DIR_GER_AUX; do 
		if [ "$DIR_GER" != "main/public-bom" ] && [ "$DIR_GER" != "main/super-parent" ]; then
		  DIR_GER_PARENT=$DIR_GER"/parent"
		else
  		  DIR_GER_PARENT=$DIR_GER		
		fi
		cd $DIR_GER_PARENT
		
		CMD="mvn -q clean install"
		MSG="Gerando $DIR_GER_PARENT (mvn clean install) ..."
		$LOG _info "$MSG" -b
		eval $CMD
		$LOG _info "$MSG" -ok
		
		cd $FONTES_DIR
	done
fi
	
$LOG _info "Finalizado com sucesso!"
exit 0

