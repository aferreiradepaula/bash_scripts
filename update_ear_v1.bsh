#!/bin/bash

###############################################################################
#
# update_ear.bsh :: Update Ear on Wildfly
#
# Autor  :: Adriano Ferreira de Paula
#
# Descr. :: Compila o modulo e atualiza a instalacao em uma porta especifica do wildfly         
#
###############################################################################
#  Features
###############################################################################
#
# v1 :: Versao inicial;
#       - Compila o modulo;
#       - Copia os arquivos gerados para uma porta especifica do wildfly;
#       - Inicializa/Reinicializa o wildfly da porta especifica.
#
###############################################################################

# Nivel de log (info, debug, error, warning) - default: info
LEVEL=${LEVEL="info"}

# Dependencia de scripts externos
LOG="logger_v4.bsh"
BUSY="busy_v2.bsh"

# Constantes globais
###############################################################################
LIST_CLIENTES="vivo chi col per tim copel sercomtel claro cpfl telebras arsat antel msc "
LIST_PORTS="0 1 2 3 4 5 6 7 8 9"
WILDFLY_MAIN_DIR_DEFAULT="/l/disk0/adrianof/cpqd/wildfly-8.2.0.Final"
FONTES_DIR=${PWD}

MAVEN_LOG_FILE="output.log"
MAVEN_LOG_DIR="/home/${USER}/log/maven"
MAVEN_LOG=""

FLAG_NC=0
FLAG_NCS=0

CURR_DIR=`pwd`
FONTES_DIR=${FONTES_DIR="$CURR_DIR"}
TARGET_DIR="$FONTES_DIR/target"

ETICS_REPO_DIR=""
SUPER_PARENT_DIR="main/super-parent"

WILDFLY_BIN_DIR=""
WILDFLY_EXE=""
WILDFLY_DEPLOYMENTS_DIR=""

ETICS_VERSION=""
WILDFLY_VERSION=""

ARTIFACT_ID=""
JAR_FILE=""

# Funcoes
###############################################################################
_intro() {	
	MSG="\n 
	*
	*                        *** Update EAR ***
	*
	*      Compila o modulo e atualiza a instalacao em uma porta especifica do wildfly
	*
	***********************************************************************************\n\n"
	$LOG _info "$MSG"
}

_uso () {
  MSG="\n
	*
	* Uso: update_ear.bsh <WILDFLY_PORT_NUM>/--help,-help,-h/ [WILDFLY_MAIN_DIR/-nc/-ncs] 
	*
	*  <WILDFLY_PORT_NUM> :: Porta do wildfly onde vai ser feito o update
	*                        Ex: 0 (para ports-00)
	*   ou
	*  --help, -help, -h  :: Imprime o uso e sai.
	*
	*  [WILDFLY_MAIN_DIR] :: Diretorio raiz da instalacao do wildfly.
	*                        Se nao for informado usa o valor default ~/cpqd/wildfly-8.2.0.Final
	*  ou
	*  [-nc]              :: Nao compilar
	*  ou 
	*  [-ncs]             :: Nao compilar e nao iniciar wildfly
	*
	*
	***********************************************************************************\n\n"
	$LOG _info "$MSG"
  exit 0
}

_getParam() {
	$LOG _debug "_getParam"	
	if [ $# -eq 0 ]; then
		_intro
		_uso
		exit 1
	fi

	if [ $# -lt 1 ] || [ $# -gt 2 ]; then	
	  $LOG _error "Numero de parametros invalidos!"
	  _uso
	  exit 1
	fi
	
	WILDFLY_PORT_NUM=$1
	WILDFLY_MAIN_DIR=$2
}

_checkParam() {
	$LOG _debug "_checkParam"	
	# A porta e obrigatorio
	if [ $WILDFLY_PORT_NUM -lt 0 ] || [ $WILDFLY_PORT_NUM -gt 9 ]; then
		# Porta invalida.
		$LOG _error "Porta informada nao eh valida."
		_uso;
		exit 1
	fi
	
	# Checa valor do wildfly
	if [ "$WILDFLY_MAIN_DIR" = "" ]; then
		WILDFLY_MAIN_DIR=$WILDFLY_MAIN_DIR_DEFAULT
		WILDFLY_BIN_DIR=$WILDFLY_MAIN_DIR/bin
		WILDFLY_EXE="$WILDFLY_BIN_DIR/debugports-0$WILDFLY_PORT_NUM.sh"
	else 
		# Diretorio foi informado, verifica se eh um diretorio e principalmente se e do wildfly.
		if [ "$WILDFLY_MAIN_DIR" != "-nc" ] && [ "$WILDFLY_MAIN_DIR" != "-ncs" ]; then
			if [ ! -d $WILDFLY_MAIN_DIR ]; then
				$LOG _error "Diretorio do wildfly informado nao existe!"
				exit 1
			else 
				WILDFLY_BIN_DIR=$WILDFLY_MAIN_DIR/bin
			
				if [ ! -d $WILDFLY_BIN_DIR ]; then
					$LOG _error "Diretorio bin do wildfly informado nao existe!"
					exit 1
				else 
					WILDFLY_EXE="$WILDFLY_BIN_DIR/debugports-0$WILDFLY_PORT_NUM.sh"
				
					if [ ! -f $WILDFLY_EXE ]; then
						$LOG _error "Nao foi encontrado o script debugports-0$WILDFLY_PORT_NUM.sh no diretorio bin do wildfly informado!"
						exit 1
					fi
				fi
			fi 
		else
			if [ "$WILDFLY_MAIN_DIR" = "-nc" ]; then
				# Nao compila
				FLAG_NC=1
			else 
				# Nao compila e nao inicializa wildfly
				FLAG_NC=1
				FLAG_NCS=1
			fi 	
			WILDFLY_MAIN_DIR=$WILDFLY_MAIN_DIR_DEFAULT
			WILDFLY_BIN_DIR=$WILDFLY_MAIN_DIR/bin
			WILDFLY_EXE="$WILDFLY_BIN_DIR/debugports-0$WILDFLY_PORT_NUM.sh"
		fi	
	fi
	
	$LOG _debug "WILDFLY_BIN_DIR = $WILDFLY_BIN_DIR"
	$LOG _debug "WILDFLY_EXE = $WILDFLY_EXE"	
	
	WILDFLY_DEPLOYMENTS_DIR="$WILDFLY_MAIN_DIR/ports-0$WILDFLY_PORT_NUM/deployments"
	$LOG _debug "WILDFLY_DEPLOYMENTS_DIR = $WILDFLY_DEPLOYMENTS_DIR"
}

_getOthersVars() {
	$LOG _debug "_getOthersVars()"
	
	if [ ! -f pom.xml ];then 
		$LOG _error "Nao foi encontrado o arquivo pom.xml!"
		$LOG _fatal "Abortando a aplicacao!"
	fi
	
	# cat pom.xml | grep -A15 "<project" | sed 's/\s*//g' | grep -2 "project.artifactId" | grep "<artifactId>" | cut -c13- | rev | cut -c14- | rev
	CMD="cat pom.xml | grep -A15 \"<project\" | sed 's/\s*//g' | grep -2 \"project.artifactId\" | grep \"<artifactId>\" | cut -c13- | rev | cut -c14- | rev"
	$LOG _debug "CMD: $CMD"
	ARTIFACT_ID=`eval "$CMD"`
	$LOG _debug "ARTIFACT_ID: $ARTIFACT_ID"
	
	# pwd | awk -F '/' '{print NF-1}'
	CMD="pwd | awk -F '/' '{print NF-1}'"
	$LOG _debug "CMD: $CMD"
	CHECK_DIR=`eval "$CMD"`
	$LOG _debug "CHECK_DIR: $CHECK_DIR"
	if [ $CHECK_DIR -lt 5 ];then 
		$LOG _error "Padrao de diretorios invalido."
		$LOG _warn "Exemplo: /home/usuario/Repositorio/GP-CLIENTE"
		$LOG _fatal "Abortando a aplicacao!"
	fi 
	CMD="pwd | awk -F '/' '{printf \"/%s/%s/%s/%s/%s\" \$1,\$2,\$3,\$4,\$5,\$6}'"
	$LOG _debug "CMD: $CMD"
	ETICS_REPO_DIR=`eval "$CMD"`
	$LOG _debug "ETICS_REPO_DIR: $ETICS_REPO_DIR"
	
	CMD="cat \$ETICS_REPO_DIR/\$SUPER_PARENT_DIR/pom.xml | grep \"<cpqd.etics.version>\" | awk -F '>' '{print \$2}' | awk -F '<' '{print \$1}'"
	$LOG _debug "CMD: $CMD"
	ETICS_VERSION=`eval "$CMD"`
	$LOG _debug "ETICS_VERSION: $ETICS_VERSION"
	
	CMD="ls $WILDFLY_DEPLOYMENTS_DIR/*deskmap*.ear | awk -F '-ear-' '{print \$2}' | rev | cut -c5- | rev"
	$LOG _debug "CMD: $CMD"
	WILDFLY_VERSION=`eval "$CMD"`
	$LOG _debug "WILDFLY_VERSION: $WILDFLY_VERSION"	
}

_runMvnCleanInstall () {
	$LOG _debug "_runMvnCleanInstall"
	
	if [ $FLAG_NC -eq 0 ]; then
		if [ ! -d $MAVEN_DIR_LOG ]; then
			CMD="mkdir -p $MAVEN_DIR_LOG"
			$LOG _debug "CMD: $CMD"
			eval "$CMD"
		fi
		MAVEN_LOG="$MAVEN_LOG_DIR/$MAVEN_LOG_FILE"		
		#Limpa o log
		CMD="rm $MAVEN_LOG; touch $MAVEN_LOG"
		$LOG _debug "CMD: $CMD"
		eval "$CMD"
		CMD="xterm -fullscreen -fg green -bg black -bd blue -title \"mvn clean install -DskipTests=true\" -e \"tail -f $MAVEN_LOG & mvn clean install -DskipTests=true -l $MAVEN_LOG\""
		$LOG _debug "CMD: $CMD"
		MSG="Compilando $ARTIFACT_ID... "
		$LOG _info "$MSG" -b
		eval $CMD
		CMD_AUX="grep FAILURE $MAVEN_LOG | grep -v BUILD"
		$LOG _debug "CMD_AUX: $CMD_AUX"
		RESP=`eval "$CMD_AUX"`
		if [ "$RESP" = "" ]; then
			$LOG _info "$MSG" -ok	
		else 
			$LOG _info "$MSG" -nok
			$LOG _error "Falha na compilacao! Log do maven: $MAVEN_LOG"
			exit 1
		fi
	else 
		$LOG _warn "Compilacao desativada!"
	fi
}


_checkWildfly () {
	$LOG _debug "_checkWildfly"
	
	# Verifica se ja esta no ar
	CMD="pgrep debugports"
	$LOG _debug "CMD: $CMD"
	PID=`eval "$CMD"`
	$LOG _debug "PID: $PID"
	if [ "$PID" != "" ]; then
		# Mata o jboss para reiniciar
		CMD="kill -9 $PID"
		$LOG _debug "CMD: $CMD"
		eval "$CMD"
	fi
}

_getFilesNames () {
	$LOG _debug "_getFilesNames"
	
	CMD="ls $TARGET_DIR/*.jar"
	$LOG _debug "CMD: $CMD"
	OLD_JAR_FILE=`eval "$CMD"`
	$LOG _debug "OLD_JAR_FILE: $OLD_JAR_FILE"
	
	CMD="echo $OLD_JAR_FILE | sed 's/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*[A-Z\-]*.jar/$WILDFLY_VERSION.jar/'"
	$LOG _debug "CMD: $CMD"	
	NEW_JAR_FILE=`eval "$CMD"`
	$LOG _debug "NEW_JAR_FILE: $NEW_JAR_FILE"
}

_updateEarFile () {
	$LOG _debug "_updateEarFile"
		
	# Verifica quais ears possuem o artefato gerado.
	CMD="ls $WILDFLY_DEPLOYMENTS_DIR/*.ear"
	$LOG _debug "CMD: $CMD"
	EAR_ARRAY=( `eval "$CMD"` )
	$LOG _debug "EAR_LIST: $EAR_LIST"	
	
	EAR_ARRAY_TO_UPDATE=()
	for EAR_FILE in "${EAR_ARRAY[@]}"; do
		CMD="unzip -l $EAR_FILE | grep $ARTIFACT_ID | awk '{print \$4}'"
		$LOG _debug "CMD: $CMD"
		JAR_FINDED=`eval "$CMD"`
		$LOG _debug "JAR_FINDED: $JAR_FINDED"
		
		if [ "$JAR_FINDED" != "" ]; then			
			EAR_ARRAY_TO_UPDATE+=("$EAR_FILE")
		fi 
	done
	$LOG _debug "EAR_ARRAY_TO_UPDATE: ${EAR_ARRAY_TO_UPDATE[@]}"

	# Renomeia os arquivos jar
	CMD="mv $OLD_JAR_FILE $NEW_JAR_FILE"
	$LOG _debug "CMD: $CMD"
	eval $CMD
	
	# Atualizando a pasta lib do ear.
	CMD="mkdir $WILDFLY_DEPLOYMENTS_DIR/lib"
	$LOG _debug "CMD: $CMD"
	eval $CMD
	
	# Copia os jars para a pasta lib para serem atualizados.
	CMD="cp $NEW_JAR_FILE $WILDFLY_DEPLOYMENTS_DIR/lib/."
	$LOG _debug "CMD: $CMD"
	eval $CMD

	# Atualiza o ear
	CMD="7z a $WEBDESKMAPREPORT_EAR_FILE $WILDFLY_DEPLOYMENTS_DIR/lib/ >/dev/null 2>&1" #/lib
	$LOG _debug "CMD: $CMD"
	MSG="Atualizando arquivos jar na pasta lib do ear ..."
	$LOG _info "$MSG" -b
	eval $CMD
	$LOG _info "$MSG" -ok
	
	# Apagando diretorio lib aux.
	CMD="rm -fr $WILDFLY_DEPLOYMENTS_DIR/lib"
	$LOG _debug "CMD: $CMD"
	eval $CMD
}

_runWildfly () {
	$LOG _debug "_runWildfly"
	if [ $FLAG_NCS -eq 0 ];then 
		CMD="xterm -fg green -bg black -bd blue -title \"WF820_ports-0$WILDFLY_PORT_NUM\" -e $WILDFLY_EXE &"
		$LOG _debug "CMD: $CMD"
		MSG="Iniciando $WILDFLY_EXE... "
		$LOG _info "$MSG" -b
		eval $CMD
		$LOG _info "$MSG" -ok	
	else
		$LOG _warn "Inicializacao do wildfly desativada!"
	fi
}

###############################################################################
# MAIN
###############################################################################
$LOG _info "Iniciando..."

# Recupera os parametros
_getParam $@

# Valida parametros
_checkParam

# Mata o wildfly, caso esteja no ar.
_checkWildfly

# Recupera informacoes auxiliares
_getOthersVars

# Gera o operweb.
_runMvnCleanInstall

# Recupera todos os nomes dos arquivos envolvidos na atualizacao.
_getFilesNames

# Faz a atualizacao  dos arquivos.
_updateEarFile

# Roda o wildfly
_runWildfly

# Finalizado
$LOG _info "Finalizado."
exit 0
